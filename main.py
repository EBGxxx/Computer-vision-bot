import telebot
from telebot import types
import numpy as np
from PIL import Image, ImageDraw, ImageFont
import io
import cv2
from ultralytics import YOLO

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot('6774558652:AAF-EYc5Re_YllJ7T6h8-vSVqWPqrFpFtZE')

# –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
class_names_russian = {
    'person': '—á–µ–ª–æ–≤–µ–∫',
    'bicycle': '–≤–µ–ª–æ—Å–∏–ø–µ–¥',
    'car': '–º–∞—à–∏–Ω–∞',
    'motorcycle': '–º–æ—Ç–æ—Ü–∏–∫–ª',
    'airplane': '—Å–∞–º–æ–ª–µ—Ç',
    'bus': '–∞–≤—Ç–æ–±—É—Å',
    'train': '–ø–æ–µ–∑–¥',
    'truck': '–≥—Ä—É–∑–æ–≤–∏–∫',
    'boat': '–ª–æ–¥–∫–∞',
    'traffic light': '—Å–≤–µ—Ç–æ—Ñ–æ—Ä',
    'fire hydrant': '–ø–æ–∂–∞—Ä–Ω—ã–π –≥–∏–¥—Ä–∞–Ω—Ç',
    'stop sign': '—Å—Ç–æ–ø –∑–Ω–∞–∫',
    'parking meter': '–ø–∞—Ä–∫–æ–≤–æ—á–Ω—ã–π —Å—á–µ—Ç—á–∏–∫',
    'bench': '—Å–∫–∞–º–µ–π–∫–∞',
    'bird': '–ø—Ç–∏—Ü–∞',
    'cat': '–∫–æ—à–∫–∞',
    'dog': '—Å–æ–±–∞–∫–∞',
    'horse': '–ª–æ—à–∞–¥—å',
    'sheep': '–æ–≤—Ü–∞',
    'cow': '–∫–æ—Ä–æ–≤–∞',
    'elephant': '—Å–ª–æ–Ω',
    'bear': '–º–µ–¥–≤–µ–¥—å',
    'zebra': '–∑–µ–±—Ä–∞',
    'giraffe': '–∂–∏—Ä–∞—Ñ',
    'backpack': '—Ä—é–∫–∑–∞–∫',
    'umbrella': '–∑–æ–Ω—Ç',
    'handbag': '—Å—É–º–∫–∞',
    'tie': '–≥–∞–ª—Å—Ç—É–∫',
    'suitcase': '—á–µ–º–æ–¥–∞–Ω',
    'frisbee': '—Ñ—Ä–∏—Å–±–∏',
    'skis': '–ª—ã–∂–∏',
    'snowboard': '—Å–Ω–æ—É–±–æ—Ä–¥',
    'sports ball': '–º—è—á',
    'kite': '–≤–æ–∑–¥—É—à–Ω—ã–π –∑–º–µ–π',
    'baseball bat': '–±–∏—Ç–∞',
    'baseball glove': '–ø–µ—Ä—á–∞—Ç–∫–∞',
    'skateboard': '—Å–∫–µ–π—Ç–±–æ—Ä–¥',
    'surfboard': '–¥–æ—Å–∫–∞ –¥–ª—è —Å–µ—Ä—Ñ–∏–Ω–≥–∞',
    'tennis racket': '—Ç–µ–Ω–Ω–∏—Å–Ω–∞—è —Ä–∞–∫–µ—Ç–∫–∞',
    'bottle': '–±—É—Ç—ã–ª–∫–∞',
    'wine glass': '–±–æ–∫–∞–ª',
    'cup': '—á–∞—à–∫–∞',
    'fork': '–≤–∏–ª–∫–∞',
    'knife': '–Ω–æ–∂',
    'spoon': '–ª–æ–∂–∫–∞',
    'bowl': '–º–∏—Å–∫–∞',
    'banana': '–±–∞–Ω–∞–Ω',
    'apple': '—è–±–ª–æ–∫–æ',
    'sandwich': '–±—É—Ç–µ—Ä–±—Ä–æ–¥',
    'orange': '–∞–ø–µ–ª—å—Å–∏–Ω',
    'broccoli': '–±—Ä–æ–∫–∫–æ–ª–∏',
    'carrot': '–º–æ—Ä–∫–æ–≤—å',
    'hot dog': '—Ö–æ—Ç-–¥–æ–≥',
    'pizza': '–ø–∏—Ü—Ü–∞',
    'donut': '–ø–æ–Ω—á–∏–∫',
    'cake': '—Ç–æ—Ä—Ç',
    'chair': '—Å—Ç—É–ª',
    'couch': '–¥–∏–≤–∞–Ω',
    'potted plant': '—Ä–∞—Å—Ç–µ–Ω–∏–µ –≤ –≥–æ—Ä—à–∫–µ',
    'bed': '–∫—Ä–æ–≤–∞—Ç—å',
    'dining table': '–æ–±–µ–¥–µ–Ω–Ω—ã–π —Å—Ç–æ–ª',
    'toilet': '—É–Ω–∏—Ç–∞–∑',
    'tv': '—Ç–µ–ª–µ–≤–∏–∑–æ—Ä',
    'laptop': '–Ω–æ—É—Ç–±—É–∫',
    'mouse': '–º—ã—à—å',
    'remote': '–ø—É–ª—å—Ç',
    'keyboard': '–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞',
    'cell phone': '–º–æ–±–∏–ª—å–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω',
    'microwave': '–º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–∫–∞',
    'oven': '–¥—É—Ö–æ–≤–∫–∞',
    'toaster': '—Ç–æ—Å—Ç–µ—Ä',
    'sink': '—Ä–∞–∫–æ–≤–∏–Ω–∞',
    'refrigerator': '—Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫',
    'book': '–∫–Ω–∏–≥–∞',
    'clock': '—á–∞—Å—ã',
    'vase': '–≤–∞–∑–∞',
    'scissors': '–Ω–æ–∂–Ω–∏—Ü—ã',
    'teddy bear': '–ø–ª—é—à–µ–≤—ã–π –º–µ–¥–≤–µ–¥—å',
    'hair drier': '—Ñ–µ–Ω',
    'toothbrush': '–∑—É–±–Ω–∞—è —â–µ—Ç–∫–∞'
}


def download_and_open_image(file_id):
    file_info = bot.get_file(file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    image_stream = io.BytesIO(downloaded_file)
    image = Image.open(image_stream).convert('RGB')
    return np.array(image)


def detect_objects(image_array):
    model = YOLO("yolov8x.pt")  # –ü—É—Ç—å –∫ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏
    results = model(image_array)  # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ

    object_counts = {}  # –°—á–µ—Ç—á–∏–∫ –æ–±—ä–µ–∫—Ç–æ–≤
    font = ImageFont.truetype("arial.ttf", 20)  # –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞ Arial
    pil_image = Image.fromarray(image_array)
    draw = ImageDraw.Draw(pil_image)

    for result in results:
        boxes = result.boxes
        for box in boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            cls_id = int(box.cls[0])
            label = model.names[cls_id]
            label_ru = class_names_russian.get(label, label)
            if label_ru in object_counts:
                object_counts[label_ru] += 1
            else:
                object_counts[label_ru] = 1
            draw.rectangle([x1, y1, x2, y2], outline=(255, 0, 0), width=2)
            draw.text((x1, y1 - 20), label_ru, font=font, fill=(255, 0, 0))

    caption = '\n'.join([f"{label}: {count}" for label, count in object_counts.items()])
    return pil_image, caption


@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ")
    btn2 = types.KeyboardButton("üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    markup.add(btn1, btn2)

    welcome_text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ–±—ä–µ–∫—Ç—ã –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö —Å –ø–æ–º–æ—â—å—é –º–æ–¥–µ–ª–∏ YOLO. "
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è –≤–µ—Ä–Ω—É —Ç–µ–±–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤. üì∏\n\n"
        "–¢–∞–∫–∂–µ —è –ø–æ–∫–∞–∂—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. üîç\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ–ø—Ü–∏–π –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å. üëá"
    )
    bot.send_message(message.chat.id, welcome_text, reply_markup=markup)


@bot.message_handler(content_types=['text'])
def handle_text(message):
    if message.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ":
        info_text = (
            "‚ÑπÔ∏è –Ø –∏—Å–ø–æ–ª—å–∑—É—é –º–æ–¥–µ–ª—å YOLOV8 –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö. "
            "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏ —è –≤–µ—Ä–Ω—É –µ–≥–æ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏. "
            "–Ø —Ç–∞–∫–∂–µ –ø–æ–∫–∞–∂—É –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–∂–¥–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞. üìä"
        )
        bot.send_message(message.chat.id, info_text)
    elif message.text == "üì∑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞":
        bot.send_message(message.chat.id, "üì∑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    file_id = message.photo[-1].file_id

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è "–ò–¥–µ—Ç –ø–æ–∏—Å–∫..."
    processing_message = bot.reply_to(message, "‚è≥ –ò–¥–µ—Ç –ø–æ–∏—Å–∫...")

    image_array = download_and_open_image(file_id)
    image_with_boxes, caption = detect_objects(image_array)

    buffer = io.BytesIO()
    image_with_boxes.save(buffer, format='JPEG')
    buffer.seek(0)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "–ò–¥–µ—Ç –ø–æ–∏—Å–∫..."
    bot.delete_message(chat_id, processing_message.message_id)

    # –û—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    bot.send_photo(chat_id, buffer, caption=caption if caption else "–û–±—ä–µ–∫—Ç—ã –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã.",
                   reply_to_message_id=message.message_id)


if __name__ == '__main__':
    bot.polling(none_stop=True)
